version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: lifesync
      POSTGRES_USER: lifesync
      POSTGRES_PASSWORD: lifesync123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lifesync"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth-service:
    build: ./services/auth-service
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://lifesync:lifesync123@postgres:5432/lifesync
      JWT_SECRET: your-secret-key-here
      PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  flowtime-service:
    build: ./services/flowtime-service
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: postgres://lifesync:lifesync123@postgres:5432/lifesync
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      JWT_SECRET: your-secret-key-here
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./services/gateway
    ports:
      - "8000:8000"
    environment:
      AUTH_SERVICE_URL: http://auth-service:8080
      FLOWTIME_SERVICE_URL: http://flowtime-service:3000
      PORT: 8000
    depends_on:
      auth-service:
        condition: service_healthy
      flowtime-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: